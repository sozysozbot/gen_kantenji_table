#!/usr/bin/env -S deno run --allow-read --allow-write gen_table.ts

// This script must be run after sort_and_transcribe.ts
// It generates a HTML table from the JSON file generated by sort_and_transcribe.ts
import RESULT_ from "./result_sorted_by_braille_and_transcribed.json" with { type: "json" };
import { TRANSCRIPTIONS, KANA_TO_DOT_INDICES, pack_into_unicode_braille } from "./transcribe_6dots_to_kana.ts";

function to_cell(kana: string) {
    if (kana.endsWith("↓")) {
        return `<td style="background-color: #ff0000"><b>${kana.slice(0, -1)}</b></td>`;
    } else return `<td><b>${kana}</b></td>`;
}

Deno.writeTextFile("result_table.html", `<!DOCTYPE html>
<body lang="ja">
<table border="1">
<tr><td></td><td></td>${TRANSCRIPTIONS.map(c =>
    "<td>" + pack_into_unicode_braille({
        dot_indices: KANA_TO_DOT_INDICES[c],
        start_bit: true,
        end_bit: true,
    }) + "</td>").join("")}<td></td><td></td></tr>
<tr><td></td><td></td>${TRANSCRIPTIONS.map(c => to_cell(c)).join("")}<td></td><td></td></tr>
<tr><td></td><td></td>${TRANSCRIPTIONS.map(
        c => {
            const filtered = RESULT_.filter(({ transcription }) => transcription.join("|") === c);
            return filtered.length === 0 ? "<td></td>" : `<td>${filtered.map(({ kanji }) => kanji).join("<br>")}</td>`
        }).join("")
    }<td></td><td></td></tr>
<tr><td style='background-color: black; color: white' colspan="${TRANSCRIPTIONS.length + 4}">------ 1マス漢点字↑ / ↓ 2マス漢点字 ------</td></tr>
<tr><td></td><td></td>${TRANSCRIPTIONS.map(c =>
        "<td>" + pack_into_unicode_braille({
            dot_indices: KANA_TO_DOT_INDICES[c],
            start_bit: true,
            end_bit: false,
        }) + "</td>").join("")}<td></td><td></td></tr>
<tr><td></td><td></td>${TRANSCRIPTIONS.map(c => to_cell(c)).join("")}<td></td><td></td></tr>
${TRANSCRIPTIONS.map(row => {
            const braille_of_row = pack_into_unicode_braille({
                dot_indices: KANA_TO_DOT_INDICES[row],
                start_bit: false,
                end_bit: true,
            });
            return `<tr><td>${braille_of_row}</td>${to_cell(row)}${TRANSCRIPTIONS.map(
                col => {
                    const filtered_ = RESULT_.filter(({ transcription }) => transcription.join("|") === col + "|" + row);
                    return filtered_.length === 0 ? "<td></td>" : `<td>${filtered_.map(({ kanji }) => kanji).join("<br>")}</td>`
                }).join("")
                }${to_cell(row)}<td>${braille_of_row}</td></tr>`
        }).join("")
    }
<tr><td></td><td></td>${TRANSCRIPTIONS.map(c => to_cell(c)).join("")}<td></td><td></td></tr>
<tr><td></td><td></td>${TRANSCRIPTIONS.map(c =>
        "<td>" + pack_into_unicode_braille({
            dot_indices: KANA_TO_DOT_INDICES[c],
            start_bit: true,
            end_bit: false,
        }) + "</td>").join("")}<td></td><td></td></tr>
</table>`);